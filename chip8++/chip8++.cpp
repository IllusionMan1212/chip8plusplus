#include "CPU.h"
#include "Memory.h"
#include "Display.h"
#include <iostream>
#include <bitset>
#include <string>


int main()
{
	std::cout << "not fully implemented\n";
	Mem::Chip8Mem mem;
	Display::Chip8Display display;
	CPU::Chip8CPU cpu;
	cpu.Set_Memory_Device(mem);
	cpu.Set_Display(display);
	cpu.Load_Sprites();

	mem.write(0x200, 0x60); mem.write(0x201, 0x90); //0x6090 - load 0x90 into V0
	mem.write(0x202, 0x61); mem.write(0x203, 0x90); //0x6190 - load 0x90 into V1
	mem.write(0x204, 0x62); mem.write(0x205, 0xF0); //0x62F0 - load 0xF0 into V2
	mem.write(0x206, 0x63); mem.write(0x207, 0x90); //0x6390 - load 0x90 into V3
	mem.write(0x208, 0x64); mem.write(0x209, 0x90); //0x6490 - load 0x90 into V4
	mem.write(0x20A, 0xA3); mem.write(0x20B, 0x00); //0xA300 - load 0x300 into I (new sprite for 'H')
	mem.write(0x20C, 0xF4); mem.write(0x20D, 0x55); //0xF455 - write V0 through V4 into memory at &I
	
	mem.write(0x20E, 0x60); mem.write(0x20F, 0xF0); //0x60FF - load 0xF0 into V0
	mem.write(0x210, 0x61); mem.write(0x211, 0x60); //0x6160 - load 0x60 into V1
	mem.write(0x212, 0x62); mem.write(0x213, 0x60); //0x6260 - load 0x60 into V2
	mem.write(0x214, 0x63); mem.write(0x215, 0x60); //0x6360 - load 0x60 into V3
	mem.write(0x216, 0x64); mem.write(0x217, 0x60); //0x6460 - load 0x60 into V4
	mem.write(0x218, 0xA3); mem.write(0x219, 0x05); //0xA305 - load 0x305 into I (new sprite for 'T')
	mem.write(0x21A, 0xF4); mem.write(0x21B, 0x55); //0xF455 - write V0 through V4 into memory at &I

	mem.write(0x21C, 0x60); mem.write(0x21D, 0x90); //0x60FF - load 0x90 into V0
	mem.write(0x21E, 0x61); mem.write(0x21F, 0xF0); //0x6118 - load 0xF0 into V1
	mem.write(0x220, 0x62); mem.write(0x221, 0x90); //0x6218 - load 0x90 into V2
	mem.write(0x222, 0x63); mem.write(0x223, 0x90); //0x6318 - load 0x90 into V3
	mem.write(0x224, 0x64); mem.write(0x225, 0x90); //0x6418 - load 0x90 into V4
	mem.write(0x226, 0xA3); mem.write(0x227, 0x0A); //0xA30A - load 0x30A into I (new sprite for 'M')
	mem.write(0x228, 0xF4); mem.write(0x229, 0x55); //0xF455 - write V0 through V4 into memory at &I

	mem.write(0x22A, 0x60); mem.write(0x22B, 0x00); //0x6000 - load 0x00 into V0
	mem.write(0x22C, 0x61); mem.write(0x22D, 0x90); //0x6190 - load 0x90 into V1
	mem.write(0x22E, 0x62); mem.write(0x22F, 0x60); //0x6260 - load 0x60 into V2
	mem.write(0x230, 0x63); mem.write(0x231, 0x60); //0x6360 - load 0x60 into V3
	mem.write(0x232, 0x64); mem.write(0x233, 0x90); //0x6490 - load 0x90 into V4
	mem.write(0x234, 0xA3); mem.write(0x235, 0x0F); //0xA30F - load 0x30F into I (new sprite for 'X')
	mem.write(0x236, 0xF4); mem.write(0x237, 0x55); //0xF455 - write V0 through V4 into memory at &I

	mem.write(0x238, 0x60); mem.write(0x239, 0x00); //0x6000 - load 0x00 into V0
	mem.write(0x23A, 0x61); mem.write(0x23B, 0x00); //0x6100 - load 0x00 into V1
	mem.write(0x23C, 0xA3); mem.write(0x23D, 0x00); //0xA300 - load 0x300 into I (sprite for 'H')
	mem.write(0x23E, 0xD0); mem.write(0x23F, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x240, 0x60); mem.write(0x241, 0x0B); //0x600B - load 0x0B into V0
	mem.write(0x242, 0xF0); mem.write(0x243, 0x29); //0xF029 - load sprite address for 'B' into I
	mem.write(0x244, 0x60); mem.write(0x245, 0x00); //0x6000 - load 0x00 into V0
	mem.write(0x246, 0x61); mem.write(0x247, 0x1B); //0x6100 - load 0x1B into V1
	mem.write(0x248, 0xD0); mem.write(0x249, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x24A, 0x60); mem.write(0x24B, 0x00); //0x6000 - load 0x00 into V0
	mem.write(0x24C, 0xF0); mem.write(0x24D, 0x29); //0xF029 - load sprite address for '0' into I
	mem.write(0x24E, 0x60); mem.write(0x24F, 0x05); //0x6005 - load 0x05 into V0
	mem.write(0x250, 0x61); mem.write(0x251, 0x1B); //0x6100 - load 0x1B into V1
	mem.write(0x252, 0xD0); mem.write(0x253, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x254, 0x60); mem.write(0x255, 0x0A); //0x600A - load 0x0A into V0
	mem.write(0x256, 0x61); mem.write(0x257, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x258, 0xA3); mem.write(0x259, 0x05); //0xA305 - load 0x305 into I (sprite for 'T')
	mem.write(0x25A, 0xD0); mem.write(0x25B, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x25C, 0x60); mem.write(0x25D, 0x0F); //0x600F - load 0x0F into V0
	mem.write(0x25E, 0x61); mem.write(0x25F, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x260, 0xA3); mem.write(0x261, 0x05); //0xA305 - load 0x305 into I (sprite for 'T')
	mem.write(0x262, 0xD0); mem.write(0x263, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x264, 0x60); mem.write(0x265, 0x00); //0x6000 - load 0x00 into V0
	mem.write(0x266, 0xF0); mem.write(0x267, 0x29); //0xF029 - load sprite address for '0' into I
	mem.write(0x268, 0x60); mem.write(0x269, 0x14); //0x6014 - load 0x05 into V0
	mem.write(0x26A, 0x61); mem.write(0x26B, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x26C, 0xD0); mem.write(0x26D, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x26E, 0x60); mem.write(0x26F, 0x19); //0x6019 - load 0x19 into V0
	mem.write(0x270, 0x61); mem.write(0x271, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x272, 0xA3); mem.write(0x273, 0x0A); //0xA30A - load 0x30A into I (sprite for 'M')
	mem.write(0x274, 0xD0); mem.write(0x275, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x276, 0x60); mem.write(0x277, 0x23); //0x6023 - load 0x0F into V0
	mem.write(0x278, 0x61); mem.write(0x279, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x27A, 0xA3); mem.write(0x27B, 0x05); //0xA305 - load 0x305 into I (sprite for 'T')
	mem.write(0x27C, 0xD0); mem.write(0x27D, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x27E, 0x60); mem.write(0x27F, 0x0E); //0x600E - load 0x0E into V0
	mem.write(0x280, 0xF0); mem.write(0x281, 0x29); //0xF029 - load sprite address for 'E' into I
	mem.write(0x282, 0x60); mem.write(0x283, 0x28); //0x6028 - load 0x28 into V0
	mem.write(0x284, 0x61); mem.write(0x285, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x286, 0xD0); mem.write(0x287, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x288, 0x60); mem.write(0x289, 0x2D); //0x602D - load 0x2D into V0
	mem.write(0x28A, 0x61); mem.write(0x28B, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x28C, 0xA3); mem.write(0x28D, 0x0F); //0xA30F - load 0x30F into I (sprite for 'X')
	mem.write(0x28E, 0xD0); mem.write(0x28F, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)

	mem.write(0x290, 0x60); mem.write(0x291, 0x32); //0x6032 - load 0x32 into V0
	mem.write(0x292, 0x61); mem.write(0x293, 0x1B); //0x611B - load 0x1B into V1
	mem.write(0x294, 0xA3); mem.write(0x295, 0x05); //0xA305 - load 0x305 into I (sprite for 'T')
	mem.write(0x296, 0xD0); mem.write(0x297, 0x15); //0xD015 - draw a 5 row sprite at coords (V0, V1)
	//76 instructions total


	//run the instructions
	for (size_t i = 0; i < 76; i++)
	{
		cpu.Execute_Step();
	} 
	
	//print the framebuffer
	for (size_t i = 0; i < 32; i++)
	{
		for (size_t j = 0; j < 8; j++)
		{
			std::string eight_pixels = "";
			std::uint8_t bits(display.read(i * 8 + j));
			if ((bits & 0b10000000) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			if ((bits & 0b01000000) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			if ((bits & 0b00100000) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			if ((bits & 0b00010000) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			if ((bits & 0b00001000) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			if ((bits & 0b00000100) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			if ((bits & 0b00000010) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			if ((bits & 0b00000001) > 0) { eight_pixels += "0"; }
			else { eight_pixels += "_"; }
			std::cout << eight_pixels;
		}
		std::cout << "\n";
	}
	
}